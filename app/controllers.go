// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "identity provider": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/Microkubes/identity-provider/design
// --out=$(GOPATH)/src/github.com/Microkubes/identity-provider
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// IdpController is the controller interface for the Idp actions.
type IdpController interface {
	goa.Muxer
	AddServiceProvider(*AddServiceProviderIdpContext) error
	DeleteServiceProvider(*DeleteServiceProviderIdpContext) error
	DeleteSession(*DeleteSessionIdpContext) error
	GetGoogleMetadata(*GetGoogleMetadataIdpContext) error
	GetMetadata(*GetMetadataIdpContext) error
	GetServiceProviders(*GetServiceProvidersIdpContext) error
	GetSessions(*GetSessionsIdpContext) error
	LoginUser(*LoginUserIdpContext) error
	ServeLogin(*ServeLoginIdpContext) error
	ServeLoginUser(*ServeLoginUserIdpContext) error
	ServeSSO(*ServeSSOIdpContext) error
}

// MountIdpController "mounts" a Idp resource controller on the given service.
func MountIdpController(service *goa.Service, ctrl IdpController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddServiceProviderIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.AddServiceProvider(rctx)
	}
	service.Mux.Handle("POST", "/saml/idp/services", ctrl.MuxHandler("addServiceProvider", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "AddServiceProvider", "route", "POST /saml/idp/services")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteServiceProviderIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteSPPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.DeleteServiceProvider(rctx)
	}
	service.Mux.Handle("DELETE", "/saml/idp/services", ctrl.MuxHandler("deleteServiceProvider", h, unmarshalDeleteServiceProviderIdpPayload))
	service.LogInfo("mount", "ctrl", "Idp", "action", "DeleteServiceProvider", "route", "DELETE /saml/idp/services")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteSessionIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteSessionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.DeleteSession(rctx)
	}
	service.Mux.Handle("DELETE", "/saml/idp/sessions", ctrl.MuxHandler("deleteSession", h, unmarshalDeleteSessionIdpPayload))
	service.LogInfo("mount", "ctrl", "Idp", "action", "DeleteSession", "route", "DELETE /saml/idp/sessions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetGoogleMetadataIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetGoogleMetadata(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/metadata/google", ctrl.MuxHandler("getGoogleMetadata", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "GetGoogleMetadata", "route", "GET /saml/idp/metadata/google")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMetadataIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetMetadata(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/metadata", ctrl.MuxHandler("getMetadata", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "GetMetadata", "route", "GET /saml/idp/metadata")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetServiceProvidersIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetServiceProviders(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/services", ctrl.MuxHandler("getServiceProviders", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "GetServiceProviders", "route", "GET /saml/idp/services")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetSessionsIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetSessions(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/sessions", ctrl.MuxHandler("getSessions", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "GetSessions", "route", "GET /saml/idp/sessions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLoginUserIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.LoginUser(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/login", ctrl.MuxHandler("loginUser", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "LoginUser", "route", "GET /saml/idp/login")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewServeLoginIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ServeLogin(rctx)
	}
	service.Mux.Handle("POST", "/saml/idp/sso", ctrl.MuxHandler("serveLogin", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "ServeLogin", "route", "POST /saml/idp/sso")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewServeLoginUserIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ServeLoginUser(rctx)
	}
	service.Mux.Handle("POST", "/saml/idp/login", ctrl.MuxHandler("serveLoginUser", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "ServeLoginUser", "route", "POST /saml/idp/login")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewServeSSOIdpContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ServeSSO(rctx)
	}
	service.Mux.Handle("GET", "/saml/idp/sso", ctrl.MuxHandler("serveSSO", h, nil))
	service.LogInfo("mount", "ctrl", "Idp", "action", "ServeSSO", "route", "GET /saml/idp/sso")
}

// unmarshalDeleteServiceProviderIdpPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteServiceProviderIdpPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteSPPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteSessionIdpPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteSessionIdpPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteSessionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PublicController is the controller interface for the Public actions.
type PublicController interface {
	goa.Muxer
	goa.FileServer
}

// MountPublicController "mounts" a Public resource controller on the given service.
func MountPublicController(service *goa.Service, ctrl PublicController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/saml/css/*filepath", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/saml/js/*filepath", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/saml/css/*filepath", "public/css")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/saml/css/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/css", "route", "GET /saml/css/*filepath")

	h = ctrl.FileHandler("/saml/js/*filepath", "public/js")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/saml/js/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/js", "route", "GET /saml/js/*filepath")

	h = ctrl.FileHandler("/saml/css/", "public/css/index.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/saml/css/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/css/index.html", "route", "GET /saml/css/")

	h = ctrl.FileHandler("/saml/js/", "public/js/index.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/saml/js/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/js/index.html", "route", "GET /saml/js/")
}

// handlePublicOrigin applies the CORS response headers corresponding to the origin.
func handlePublicOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler

	h = ctrl.FileHandler("/swagger-ui/*filepath", "swagger-ui/dist")
	service.Mux.Handle("GET", "/swagger-ui/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger-ui/dist", "route", "GET /swagger-ui/*filepath")

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger-ui/", "swagger-ui/dist/index.html")
	service.Mux.Handle("GET", "/swagger-ui/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger-ui/dist/index.html", "route", "GET /swagger-ui/")
}
